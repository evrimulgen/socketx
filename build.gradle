plugins {
  id 'com.jfrog.bintray' version '1.7.3'
}
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = 'com.obsidiandynamics.socketx'
version = '0.3.0-SNAPSHOT'
  
def envUser = 'BINTRAY_USER'
def envKey = 'BINTRAY_KEY'
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.bintray'

  repositories {
    jcenter()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }
  
  dependencies {
    testCompile 'com.obsidiandynamics.indigo:indigo-assurance:1.1.0'
    testCompile 'com.obsidiandynamics.fulcrum:fulcrum-assert:0.4.0'
    testCompile 'com.obsidiandynamics.fulcrum:fulcrum-junit:0.4.0'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testRuntime 'org.slf4j:slf4j-log4j12:1.7.25'
    testRuntime 'log4j:log4j:1.2.17'
  }

  jacoco {
    toolVersion = '0.7.10-SNAPSHOT'
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
      html.enabled = true
      xml.enabled = true
      csv.enabled = false
    }
  }

  // invoke this task when ready to publish to Bintray
  bintrayUpload {
    dependsOn ':bintrayCredentialsCheck'
  }
}

subprojects {
  dependencies {
    testCompile project(':').sourceSets.test.output
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = allprojects.test
  additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(allprojects.sourceSets.main.output)
  executionData = files(allprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = false
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['sample/**'])
    })
  }
}

def packageName = 'socketx-core'

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'com.obsidiandynamics.yconf:yconf-core:0.2.1'
  compile 'com.obsidiandynamics.fulcrum:fulcrum-await:0.4.0'
  compile 'com.obsidiandynamics.fulcrum:fulcrum-shell:0.4.0'
  compile 'javax.servlet:javax.servlet-api:3.1.0'
  
  testCompile 'com.obsidiandynamics.yconf:yconf-snakeyaml:0.2.1'
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = 'javadoc'
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = 'sources'
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(':').group
      artifactId packageName
      version project(':').version
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

def packageDesc = 'Library for building high-performance WebSocket applications'
def repoName = 'socketx'
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ['mavenJava']
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = 'obsidiandynamics'
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ['BSD New']
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = false
    version {
      name = project(':').version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(':').version
    }
  }
}
